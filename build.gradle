plugins {
	id 'org.springframework.boot' version '2.6.6'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'war'
	id 'jacoco'
	id "org.sonarqube" version "3.4.0.2513"
}

group = 'ar.edu.unq.desapp.grupoh'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

sonarqube {
	properties {
		property "sonar.projectKey", "DesApp-Grupo-H-012022"
		property "sonar.organization", "desapp-grupo-h"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.projectName", "CriptoP2P"
		property "sonar.projectVersion", 1.0
		property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.junit.reportsPath", "build/test/test/*/TEST-*.xml"
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
	}
}

jacoco {
	toolVersion = "0.8.5"
}

dependencies {
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testCompileOnly 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	implementation 'io.springfox:springfox-swagger2:2.7.0'
	implementation 'io.springfox:springfox-swagger-ui:2.7.0'

	implementation 'javax.validation:validation-api:2.0.1.Final'

	implementation 'junit:junit:4.13.1'

	implementation 'redis.clients:jedis:4.2.3'

	implementation 'io.jsonwebtoken:jjwt:0.9.1'

	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	runtimeOnly 'com.h2database:h2'

	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testImplementation('org.mockito:mockito-core:3.+')

	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.test {
	finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
	dependsOn(tasks.test)
}

tasks.jacocoTestReport {
	reports {
		xml.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir("jacocoHtml").get().asFile)
	}

	dependsOn test {
		classDirectories.setFrom(
				fileTree(dir: "build/classes/java/main")
						.filter({ file -> !file.name.contains('BackendDesappApiApplication') })
						.filter({ file -> !file.name.contains('Log') })
						.filter({ file -> !file.name.contains('Response') })
						.filter({ file -> !file.name.contains('SecurityConfiguration') })
						.filter({ file -> !file.name.contains('ServletInitializer') })
						.filter({ file -> !file.name.contains('DTO') })
						.filter({ file -> !file.name.contains('Controller') })
						.filter({ file -> !file.name.contains('JWTAuthorizationFilter') })
						.filter({ file -> !file.name.contains('JwtTokenFilter') })
						.filter({ file -> !file.name.contains('JwtTokenUtil') })
						.filter({ file -> !file.name.contains('WebSecurityConfig') })
						.filter({ file -> !file.name.contains('DataLoader') })
						.filter({ file -> !file.name.contains('SecurityConfig') })
						.filter({ file -> !file.name.contains('SwaggerConfig') })
						.filter({ file -> !file.name.contains('Exception') })
		)
	}
}